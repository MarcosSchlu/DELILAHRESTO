---
openapi: 3.0.0
info:
  title: Delilah Resto
  description: Proyecto 3 de Acamica
  contact:
    email: mschlusselblum@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:3006
  description: Delilah Resto
tags:
- name: Usuarios
  description: Usuarios endpoints
- name: Productos
  description: Productos endpoints
- name: Pedidos
  description: Pedidos endpoints
paths:
  /nuevousuario:
    post:
      tags:
      - Usuarios
      summary: Crea nuevo usuario
      description: Agrega un usuario a la base de datos
      operationId: crearUsuario
      requestBody:
        description: Usuario a registrar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crearUsuario'
      responses:
        "201":
          description: Usuario creado exitosamente
        "400":
          description: Todos los campos deben estar completos
        "401":
          description: El email ya fue registrado
      security: []
  /login:
    post:
      tags:
      - Usuarios
      summary: Login de usuario
      description: Login de usuario
      operationId: logIn
      requestBody:
        description: Usuario a loguear
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logIn'
      responses:
        "201":
          description: Usuario logueado exitosamente
        "200":
          description: Aministrador logueado exitosamente
        "401":
          description: Error en LogIn
        "400":
          description: Todos los campos deben estar completos
  /usuarios:
    get:
      tags:
      - Usuarios
      summary: Usuarios registrados
      description: Obtiene todos los usuarios registrados
      operationId: buscarUsuarios
      parameters:
      - name: authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      responses:
        "201":
          description: Usuarios registrados
        "400":
          description: No se encontraron usuarios registrados
      security:
      - BearerAuth: []
  /nuevoproducto:
    post:
      tags:
      - Productos
      summary: Crea nuevo producto
      description: Agrega un nuevo producto a la base de datos
      operationId: crearproducto
      parameters:
      - name: authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      requestBody:
        description: Producto a registrar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nuevoProducto'
      responses:
        "201":
          description: Producto creado
        "400":
          description: El producto ya existe
        "404":
          description: Error al crear el producto
      security:
      - BearerAuth: []
  /productos:
    get:
      tags:
      - Productos
      summary: Productos registrados
      description: Obtiene todos los productos registrados
      operationId: buscarProductos
      parameters:
      - name: authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      responses:
        "201":
          description: Productos registrados
        "400":
          description: No se encontraron productos registrados
        "404":
          description: Error al obtener productos registrados
      security:
      - BearerAuth: []
  /actualizarproducto:
    put:
      tags:
      - Productos
      summary: Modifica un producto
      description: Actualiza precio de un producto existente
      operationId: actualizarproducto
      parameters:
      - name: authorization
        in: header
        required: true
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      requestBody:
        description: Usuario a registrar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actualizarProducto'
      responses:
        "201":
          description: Producto modificado
        "400":
          description: Todos los campos deben estar completos
        "404":
          description: Error al actualizar el producto
      security:
      - BearerAuth: []
  /borrarproducto:
    delete:
      tags:
      - Productos
      summary: Eliminar un producto
      description: Elimina un producto de la base de datos
      operationId: eliminarProducto
      parameters:
      - name: authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      requestBody:
        description: Producto a eliminar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/borrarProducto'
      responses:
        "201":
          description: Producto eliminado
        "404":
          description: Error al eliminar el producto
      security:
      - BearerAuth: []
  /nuevopedido:
    post:
      tags:
      - Pedidos
      summary: Crea nuevo pedido
      operationId: crearPedido
      parameters:
      - name: authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      requestBody:
        description: Pedido a resgistrar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crearPedido'
      responses:
        "201":
          description: Pedido creado
        "400":
          description: Todos los campos deben estar completos
        "409":
          description: Error al crear edido
      security:
      - BearerAuth: []
  /pedido:
    get:
      tags:
      - Pedidos
      summary: Pedidos registrados por usuario
      parameters:
      - name: authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      requestBody:
        description: Usuario a registrar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/buscarPedidoPorUsuario'
      responses:
        "201":
          description: Pedidos registrados por usuario
      security:
      - BearerAuth: []
  /pedidos:
    get:
      tags:
      - Pedidos
      summary: Pedidos registrados
      operationId: buscarPedidos
      parameters:
      - name: authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      responses:
        "201":
          description: Lista de pedidos registrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/buscarPedidos'
        "400":
          description: No existen pedidos registrados
        "409":
          description: Erroa al buscar pedidos registrados
      security:
      - BearerAuth: []
  /actualizarpedido:
    post:
      tags:
      - Pedidos
      summary: Modifica el estado de un pedido
      operationId: actualizarpedido
      parameters:
      - name: authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          example: TOKEN OF LOGIN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actualizarpedido'
        required: true
      responses:
        "201":
          description: Pedido modificado!
        "403":
          description: El usuario no es administrador
        "400":
          description: Todos los campos deben estar completos
      security:
      - BearerAuth: []
components:
  schemas:
    crearUsuario:
      required:
      - contrase単a
      - dirreciondeenvio
      - email
      - nombreyapellido
      - telefono
      - usuario
      type: object
      properties:
        usuario:
          type: string
          example: Gonza
        nombreyapellido:
          type: string
          example: Gonza Perez
        email:
          type: string
          example: guan@perez.com
        telefono:
          type: string
          example: "1351531459"
        dirreciondeenvio:
          type: string
          example: Maiupo 94
        contrase単a:
          type: string
          example: gonperez25
    logIn:
      required:
      - contrase単a
      - email
      type: object
      properties:
        email:
          type: string
          example: juan@perez.com
        contrase単a:
          type: string
          example: juanperez25
    nuevoProducto:
      required:
      - Precio
      - Producto
      type: object
      properties:
        Producto:
          type: string
          example: Muslo de pollo
        Precio:
          type: integer
          example: 80
    actualizarProducto:
      required:
      - Precio
      - Producto
      type: object
      properties:
        Producto:
          type: string
          example: Muslo de pollo
        Precio:
          type: integer
          example: 100
    borrarProducto:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          example: 5
    actualizarpedido:
      type: object
      properties:
        id:
          type: integer
          example: 5
        estado:
          type: string
          description: estado
          enum:
          - Nuevo
          - Confirmado
          - En preparacion
          - Enviado
          - Entregado
          - Cancelado
    buscarPedidos:
      type: object
      properties:
        id:
          type: integer
          example: 2
        usuario:
          type: integer
        precio:
          type: number
          example: 400
        estado:
          type: string
          example: Nuevo
        formadepago:
          type: string
          example: Efectivo
        dirrecciondeenvio:
          type: string
          example: Maipu 25
        productos:
          type: string
          example: Milanesa
    buscarPedidoPorUsuario:
      type: object
      properties:
        usuario:
          type: string
          example: Gonza
    crearPedido:
      required:
      - formadepago
      - producto
      type: object
      properties:
        producto:
          type: string
          description: estado
          enum:
          - Hamburguesa
          - Pancho
          - Coca
        formadepago:
          type: string
          description: estado
          enum:
          - Efectivo
          - Tarjeta
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
